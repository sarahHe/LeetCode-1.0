/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        ListNode *h1 = l1, *h2 = l2;
        int add = 0;
        l1->val = l1->val + l2->val + add;
        if (l1->val > 9) {
            l1->val = l1->val - 10;
            add = 1;
        }
        l2->val = l1->val;
        while (l1->next && l2->next) {
            l1 = l1->next;
            l2 = l2->next;
            l1->val = l1->val + l2->val + add;
            
            if (l1->val > 9) {
                l1->val = l1->val - 10;
                add = 1;
            }
            else
                add = 0;
            
            l2->val = l1->val;
        }
        if (l1->next && !l2->next) {
            if (add) {
                while (l1->next) {
                    l1 = l1->next;
                    if (l1->val < 9) {
                        l1->val++;
                        add = 0;
                        break;
                    }
                    
                    l1->val = 0;
                }
                if (!l1->next && add) {
                    ListNode *node = new ListNode(1);
                    l1->next = node;
                }
            }
            return h1;
        }
        else if (!l1->next && l2->next) {
            if (add) {
                while (l2->next) {
                    l2 = l2->next;
                    if (l2->val < 9) {
                        l2->val++;
                        add = 0;
                        break;
                    }
                    
                    l2->val = 0;
                }
                if (!l2->next && add) {
                    ListNode *node = new ListNode(1);
                    l2->next = node;
                }
            }
            return h2;
        }
        else {
            if (add) {
                ListNode *node = new ListNode(1);
                l2->next = node;
            }
            return h2;    
        }
    }
};
