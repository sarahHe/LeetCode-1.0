// 题目要求可以多次买卖，但是同一时间只能有一股在手里。
// 这样就可以在每次上升子序列之前买入，在上升子序列结束的时候卖出。相当于能够获得所有的上升子序列的收益。
// 而且，对于一个上升子序列，比如：5，1，2，3，4，0 中的1，2，3，4序列来说，对于两种操作方案：
// 一，在1买入，4卖出；
// 二，在1买入，2卖出同时买入，3卖出同时买入，4卖出；
// 这两种操作下，收益是一样的。
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int buy = -1, i = 0, total = 0;
        
        while (i < (int)prices.size() - 1) {
            while (prices[i] >= prices[i+1] && i< (int)prices.size() - 1)
                i++;
            if (i == prices.size() - 1) 
                return total;
            if (prices[i] < prices[i+1] && buy == -1) 
                buy = i;
  
            while (prices[i] <= prices[i+1] && i< (int)prices.size() - 1)
                i++;
            total = total + prices[i] - prices[buy];
            buy = -1;
        }
        return total;
    }
};
